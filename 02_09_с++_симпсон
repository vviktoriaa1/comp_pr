#include <iostream>
#include <cmath>
#include <iomanip>
#include <vector>

using namespace std;

// Параметры задачи (a > 0)
const double a = 2.0;
const double b = 1.0;

// Подынтегральная функция: e^(-a*x) * cos(b*x)
double f(double x) {
    return exp(-a * x) * cos(b * x);
}

// Метод Симпсона для заданного числа интервалов
double simpson_integration(double from, double to, int n) {
    if (n % 2 != 0) n++; // Гарантируем четное число интервалов
    double h = (to - from) / n;
    double sum = f(from) + f(to);
    
    for (int i = 1; i < n; i++) {
        double x = from + i * h;
        sum += (i % 2 == 0) ? 2.0 * f(x) : 4.0 * f(x);
    }
    
    return h * sum / 3.0;
}

// Адаптивный метод Симпсона с контролем точности
double adaptive_simpson(double from, double to, double eps, int max_iter = 100) {
    int n = 2;
    vector<double> results;
    results.push_back(simpson_integration(from, to, n));
    
    for (int iter = 1; iter <= max_iter; iter++) {
        n *= 2;
        results.push_back(simpson_integration(from, to, n));
        
        // Проверка точности по правилу Рунге
        if (iter >= 2) {
            double error = fabs(results[iter] - results[iter-1]) / 15.0;
            if (error < eps) {
                cout << "Достигнута точность за " << iter << " итераций" << endl;
                return results.back();
            }
        }
    }
    
    cout << "Предупреждение: максимальное число итераций достигнуто" << endl;
    return results.back();
}

int main() {
    const double from = 0.0;
    const double to = 20.0; // Достаточное значение благодаря экспоненциальному затуханию
    const double eps = 1e-6;
    
    cout << fixed << setprecision(8);
    cout << "Вычисление интеграла e^(-" << a << "*x) * cos(" << b << "*x)" << endl;
    cout << "Метод Симпсона с точностью " << eps << endl;
    
    double result = adaptive_simpson(from, to, eps);
    double exact = a / (a*a + b*b);
    
    cout << "Численный результат: " << result << endl;
    cout << "Аналитическое решение: " << exact << endl;
    cout << "Абсолютная погрешность: " << fabs(result - exact) << endl;
    
    return 0;
}
