import math

g = 9.81

def y(T, V, alpha, H):
    return H + V * T * math.sin(alpha) - (g * T**2) / 2.0

def dy(T, V, alpha):
    return V * math.sin(alpha) - g * T

def newton_method(V, alpha, H, initial_guess, tolerance=1e-6, max_iterations=100):
    T = initial_guess
    for i in range(max_iterations):
        y_val = y(T, V, alpha, H)
        dy_val = dy(T, V, alpha)

        if dy_val == 0:
            print("Производная равна нулю. Метод Ньютона не может быть применен.")
            return -1

        T_new = T - y_val / dy_val

        if abs(T_new - T) < tolerance:
            return T_new

        T = T_new

    print(f"Метод Ньютона не сошелся за {max_iterations} итераций.")
    return -1

def main():
    V = float(input("Введите начальную скорость V (в м/с): "))
    alpha = float(input("Введите угол alpha (в градусах): "))
    H = float(input("Введите высоту обрыва H (в метрах): "))

    alpha_rad = math.radians(alpha)

    initial_guess = (V * math.sin(alpha_rad)) / g

    T = newton_method(V, alpha_rad, H, initial_guess)

    if T != -1:
        print(f"Время полета T: {T} секунд")

        t = float(input("Введите время t (в секундах): "))

        x = V * t * math.cos(alpha_rad)
        y_val = H + V * t * math.sin(alpha_rad) - (g * t**2) / 2.0

        y_val = max(y_val, 0)

        print(f"Горизонтальное расстояние x(t): {x} метров")
        print(f"Высота от дна обрыва y(t): {y_val} метров")

if __name__ == "__main__":
    main()
