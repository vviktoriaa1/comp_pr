def calculate_time(S, V, U):
    """
    Функция для вычисления общего времени движения лодки.
    """
    t1 = S / (V + U)  # Время по течению
    t2 = S / (V - U)  # Время против течения
    return t1 + t2  # Общее время

def newton_method(S, V, U, initial_guess, tolerance=1e-6, max_iterations=100):
    """
    Метод Ньютона для нахождения корня уравнения f(T) = calculate_time(S, V, U) - T.
    """
    T = initial_guess
    for i in range(max_iterations):
        f = calculate_time(S, V, U) - T  # Функция f(T)
        df = -1  # Производная функции f(T)

        if df == 0:
            print("Производная равна нулю. Метод Ньютона не может быть применен.")
            return -1

        T_new = T - f / df  # Новое приближение

        if abs(T_new - T) < tolerance:  # Проверка на сходимость
            return T_new

        T = T_new  # Обновляем значение T

    print(f"Метод Ньютона не сошелся за {max_iterations} итераций.")
    return -1

def main():
    # Ввод данных от пользователя
    S = float(input("Введите расстояние между пунктами S (в метрах): "))
    V = float(input("Введите скорость лодки V (в м/с): "))
    U = float(input("Введите скорость течения реки U (в м/с): "))

    # Проверка корректности введенных данных
    if V <= U:
        print("Скорость лодки должна быть больше скорости течения реки.")
        return

    # Начальное предположение для времени движения лодки
    initial_guess = S / V

    # Вычисление общего времени движения лодки методом Ньютона
    T = newton_method(S, V, U, initial_guess)

    if T != -1:
        print(f"Общее время движения лодки T: {T} секунд")

# Запуск программы
if __name__ == "__main__":
    main()
